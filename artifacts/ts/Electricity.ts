/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  SubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as ElectricityContractJson } from "../Electricity.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace ElectricityTypes {
  export type Fields = {
    symbol: HexString;
    name: HexString;
    totalSupply: bigint;
    rewardPerReduction: bigint;
    count: bigint;
    countDecimals: bigint;
  };

  export type State = ContractState<Fields>;

  export type ElectricityProducedEvent = ContractEvent<{
    num: bigint;
    from: Address;
  }>;
  export type ElectricityConsumedEvent = ContractEvent<{
    num: bigint;
    to: Address;
    rewardAmount: bigint;
  }>;

  export interface CallMethodTable {
    getSymbol: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getName: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getDecimals: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getTotalSupply: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getCurrentCount: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<
  ElectricityInstance,
  ElectricityTypes.Fields
> {
  at(address: string): ElectricityInstance {
    return new ElectricityInstance(address);
  }

  tests = {
    getSymbol: async (
      params: Omit<
        TestContractParams<ElectricityTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "getSymbol", params);
    },
    getName: async (
      params: Omit<
        TestContractParams<ElectricityTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "getName", params);
    },
    getDecimals: async (
      params: Omit<
        TestContractParams<ElectricityTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getDecimals", params);
    },
    getTotalSupply: async (
      params: Omit<
        TestContractParams<ElectricityTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getTotalSupply", params);
    },
    getCurrentCount: async (
      params: Omit<
        TestContractParams<ElectricityTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getCurrentCount", params);
    },
    produce: async (
      params: TestContractParams<
        ElectricityTypes.Fields,
        { num: bigint; from: Address }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "produce", params);
    },
    consume: async (
      params: TestContractParams<
        ElectricityTypes.Fields,
        { num: bigint; to: Address }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "consume", params);
    },
  };
}

// Use this object to test and deploy the contract
export const Electricity = new Factory(
  Contract.fromJson(
    ElectricityContractJson,
    "",
    "329997ab7d0666b6d12e76a4c110f6bf334baab5f863a1ad99144d0912e1a795"
  )
);

// Use this class to interact with the blockchain
export class ElectricityInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<ElectricityTypes.State> {
    return fetchContractState(Electricity, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeElectricityProducedEvent(
    options: SubscribeOptions<ElectricityTypes.ElectricityProducedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Electricity.contract,
      this,
      options,
      "ElectricityProduced",
      fromCount
    );
  }

  subscribeElectricityConsumedEvent(
    options: SubscribeOptions<ElectricityTypes.ElectricityConsumedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Electricity.contract,
      this,
      options,
      "ElectricityConsumed",
      fromCount
    );
  }

  subscribeAllEvents(
    options: SubscribeOptions<
      | ElectricityTypes.ElectricityProducedEvent
      | ElectricityTypes.ElectricityConsumedEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(
      Electricity.contract,
      this,
      options,
      fromCount
    );
  }

  methods = {
    getSymbol: async (
      params?: ElectricityTypes.CallMethodParams<"getSymbol">
    ): Promise<ElectricityTypes.CallMethodResult<"getSymbol">> => {
      return callMethod(
        Electricity,
        this,
        "getSymbol",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getName: async (
      params?: ElectricityTypes.CallMethodParams<"getName">
    ): Promise<ElectricityTypes.CallMethodResult<"getName">> => {
      return callMethod(
        Electricity,
        this,
        "getName",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getDecimals: async (
      params?: ElectricityTypes.CallMethodParams<"getDecimals">
    ): Promise<ElectricityTypes.CallMethodResult<"getDecimals">> => {
      return callMethod(
        Electricity,
        this,
        "getDecimals",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getTotalSupply: async (
      params?: ElectricityTypes.CallMethodParams<"getTotalSupply">
    ): Promise<ElectricityTypes.CallMethodResult<"getTotalSupply">> => {
      return callMethod(
        Electricity,
        this,
        "getTotalSupply",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getCurrentCount: async (
      params?: ElectricityTypes.CallMethodParams<"getCurrentCount">
    ): Promise<ElectricityTypes.CallMethodResult<"getCurrentCount">> => {
      return callMethod(
        Electricity,
        this,
        "getCurrentCount",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends ElectricityTypes.MultiCallParams>(
    calls: Calls
  ): Promise<ElectricityTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      Electricity,
      this,
      calls,
      getContractByCodeHash
    )) as ElectricityTypes.MultiCallResults<Calls>;
  }
}
